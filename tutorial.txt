# Lógica de programação

# Photshop

# front-end
- HTML5 e CSS3
- UX UI
- JavaScript
- Frameworks (bootstrap)
- CMS (wordpress)

# banco de dados

# sistemas desktop
electron

# back-end (Java ou php)

# testes

# pi
___________________________________

Lógica de programação
- variáveis
- operadores
- algorítmo
- estruturas de controle
- POO
- estruturas de dados

GIT e GITHUB

Comandos básicos do git:
git config --global user.name "Seu nome"
git config --global user.email "seuemail@email.com"
git clone url_do_repositório 
git add . (adiciona ao repositório local)
git commit -m "tutorial" (ducumentar alterações)
git status
git pull (sincronuzar as informações)
git push (envia ao repositório)

Gerar token GitHub
1) Settings
2) Developer Settings
3) Token classic
4) Gerar o token selecionando tudo, guardar o token
________________________________________________

GitHub Ordem de Salvamento:
    Antes: 
    . configurar o git com email (git config --global user.email) e seu nome de usuário (git config --global user.email "seuemail@email.com")
    . criar repositório no GitHub;
    . clonar (git clone + (botão direito)) no git bash here
	1) git status
	2) git add . 
	3) git status
	4) git commit -m"documentar"
	5) git status
	6) git push (envia ao repositório)
	7) git pull (sincronuzar as informações)
________________________________________________

Boas práticas na programação
1) Cabeçalho de documentação
/**
    Nome do projeto
    descrição de classe ou função
    @author Gustavo Nunes Bispo
    @version 1.0
*/
2) Nomes de arquivos, variáveis, funções, classes, e etc
Regras (clean code)
- declarar nomes com relação ao problema
- não usar espaço, ç, acentos, ou caracteres especiais para declarar nomes
- só classes tem letra maiúscula
- constantes e variáveis não iniciam com número
- quando declarar dois nomes usar a tecnica do camelo (camel case)
Exemplo
nome cliente -> nomecliente
________________________________________________
MANDAMENTOS DA PROGRAMAÇÃO

1) UX (User eXperience) - desenvolver sempre pensando na experiência do usuário
Vídeo: <https://www.youtube.com/watch?v=Z1GNW_woXI0>

2) Usar o mínimo possível de código (caracteres[lembra do marcapasso])

3) Entender o problema, o objetivo. Não adianta tentar codar sem saber o objetivo
Algoritmo ("Receita de Bolo")
- variáveis 
- entrada - processamento - saída
________________________________________________

Comandos do MS-DOS
cls -> limpa a tela
dir -> listar arquivos e diretórios
cd nome -> entra no diretório
cd .. -> voltar no diretório
________________________________________________

Node - Plataforma de execução do JavaScript fora do browser
Sempre usar LTS

Comandos básicos
    node -v (versão)
    npm -v (versão do npm)
    npm ls (pacotes)
    npm init (iniciar novo projeto em JavaScript) = package.json (JavaScript Object Notation)
    npm i nome_pacote (instala novo pacote)
    npm r nome_pacote (remover pacote)
________________________________________________

Variaveis e Constantes

Uma constante é como uma variável, mas com uma diferença importante: uma vez que você define o valor de uma constante, ele não pode ser alterado durante a execução do programa.

Por que usar constantes?
Segurança: Se você sabe que um valor não deve ser alterado em seu programa, usar uma constante evita erros.
Legibilidade: Quando você usa uma constante, deixa claro para quem está lendo o código que aquele valor é fixo e importante.
Boas práticas: Em muitos casos, é recomendado usar constantes sempre que possível para valores que não precisam mudar, facilitando a manutenção do código.

Uma variável é um espaço na memória do computador onde armazenamos dados que podem ser utilizados e modificados durante a execução de um programa. O nome "variável" vem do fato de que o valor armazenado pode variar ao longo do tempo, conforme o programa roda.

Por que usar variáveis?
Para guardar informações que você vai precisar mais tarde.
Para realizar cálculos ou tomar decisões baseadas em diferentes valores.

Nas linguagens de programação as variáveis são estáticas (tipadas) ou dinâmicas (dinamicamente tipadas)

Existem 3 tipos de variáveis:

string -> todo tipo de caracteres
number -> números inteiros e não inteiros
boolean -> true | false

ATENÇÃO: no JS uma variável pode ser criada com "let" ou "var"

"var" é obsoleto e inseguro, use o "let"

________________________________________________

Comandos JavaScript (SINTAXE)
Console.log() -> escreve no console
Console.clear() -> limpa tela do console
const -> criar declarar constante
let -> criar variável
typeof() -> verificar o tipo de variável
________________________________________________
Estruturas de controle
- condicionais
- laços de repetições

Estruturas de controle condicionais

1)
if () {
    //condição verdadeira
}

2)
if () {
    //condição verdadeira
}else{
    //condição falsa
}

3)
if (1) {
    //condição verdadeira
}else if (2) {
    //condição falsa
}else {
    //condição falsa
}
obs: nessa estrutura o else é opcional, porém se indicado caso não haja nenhuma verdadeira ele executa o else

switch case (uso de variável numérica(número inteiro))

switch (variável) {
    case 1:
        //código caso o valor da variavel seja X
        break
    case 2:
        //código caso o valor da variavel seja Y
        break
    case 3: 
        //código caso o valor da variavel seja Z
        break
    default:
        //opcional
        //só será executado caso não seja uma das sentenças
}

Laços de repetições

for (let i = 1; i < 10; i++) {

}

// Repetições definidas
// let i = 1 (início)
// i < 10 (condição)

Uso do laço for
1) Percorrer uma estrutura de dados
2) Simplificação de código
3) Fazer cálculos levando em conta a variável interna do laço

while (condição) {
    // condição verdadeira
}

do {
    //executa uma vez idependente da condição
}while (condição)

As estruturas while e do-while, são estruturas de repetição infinitas(enquanto a condição for verdadeira)

________________________________________________
Executando o JavaScript junto ao HTML5
- Execução interna no HTML5;
- Link com um documento JS;

________________________________________________
-----POO (Programação Orientada a Objetos)------

- Objeto -> estrutura de dados

- Pilares do POO
    // Reutilização
    . Habstração;
    . Herança;
    . Polimorfismo;

    // Segurança
    . Encapsulamento;

- Conceito relacionado a estrutura de dados:
    . CRUD(Create[criar], Read[ler], Update[modificar] e  Delete[excluir]):
        São 4 operações básicas para reaizar com a estrutura de dados.

Classe (biologia [mamíferos])
Lingua Portuguesa:
Objeto (substantivo [])
Atributo (adjetivo)
Métodos (verbos)

- Classe modelo (abstração - herança - polimorfismo)
    . Bibliotecas (nativas ou não)
    . Criada pelo usuário usando class

    OBS: O ponto (".") é usado para acessar atributos e métodos da classe modelo
________________________________________________
/**
 * @author Gustavo Nunes Bispo
 * _____________________________
 * Meu Método de Comentar:
 * * = Observações;
 * ? = Dúvida para perquisar/perguntar;
 * ! = Modificar/Adicionar código;
 * TODO: = Introdução, Resumo e/ou Conclusão do tema;
*/